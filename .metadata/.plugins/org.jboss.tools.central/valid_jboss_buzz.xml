<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Using React as frontend for jBPM Business Apps</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/70C5mukIZLQ/using-react-as-frontend-for-jbpm.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-using_react_as_frontend_for_jbpm_business_apps</id><updated>2019-01-08T16:02:38Z</updated><published>2019-01-08T15:59:00Z</published><content type="html">&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;a href="https://reactjs.org/"&gt;React&lt;/a&gt; is a very popular and powerful JavaScript framework and is currently one of the&amp;nbsp;best frontend development frameworks out there.&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br /&gt;&lt;/div&gt;In this demo we show how you can easily integrate React into your existing or new &lt;a href="https://start.jbpm.org/"&gt;jBPM Business Application&lt;/a&gt; and consume data from the the out-of-the-box Rest services via React components.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://github.com/business-applications/sample-react/raw/master/img/reactdemo1.png?raw=true" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="370" data-original-width="800" height="183" src="https://github.com/business-applications/sample-react/raw/master/img/reactdemo1.png?raw=true" width="400" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;React Demo&amp;nbsp;&lt;/div&gt;&lt;br /&gt;As usual all the sources of this demo are on &lt;a href="https://github.com/business-applications/sample-react"&gt;GitHub&lt;/a&gt;.&lt;br /&gt;The demo integrates the React front-end app with the service module of your jBPM Business application via the &lt;a href="https://github.com/eirslett/frontend-maven-plugin"&gt;frontend-maven-plugin&lt;/a&gt;&amp;nbsp;and then bundles its resources in the generated business app jar. This way you can just start your business app with the provided launch scripts and both React frontend and your business app backend will be available and started together.&lt;br /&gt;&lt;br /&gt;When building the demo the same plugin will also attempt to install node and npm (which are needed for React apps) if they are not available on your machine. It will also build the React frontend for you, so no need to build it separately.&lt;br /&gt;&lt;br /&gt;Here is the youtube video for this demo:&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;iframe allowfullscreen="" class="YOUTUBE-iframe-video" data-thumbnail-src="https://i.ytimg.com/vi/D6T2IAD_YvM/0.jpg" frameborder="0" height="266" src="https://www.youtube.com/embed/D6T2IAD_YvM?feature=player_embedded" width="320"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Feel free to leave us any comments about this demo and ideas on how to improve it or what you would like to see next.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/70C5mukIZLQ" height="1" width="1" alt=""/&gt;</content><summary>React is a very popular and powerful JavaScript framework and is currently one of the best frontend development frameworks out there. In this demo we show how you can easily integrate React into your existing or new jBPM Business Application and consume data from the the out-of-the-box Rest services via React components. React Demo  As usual all the sources of this demo are on GitHub. The demo int...</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2019-01-08T15:59:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2019/01/using-react-as-frontend-for-jbpm.html</feedburner:origLink></entry><entry><title>Using a local NuGet server with Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/sMyPLEZfoqo/" /><category term=".NET Core" /><category term="Modern App Dev" /><category term="Red Hat OpenShift Container Platform" /><category term=".NET" /><category term="BaGet" /><category term="builds" /><category term="NuGet" /><category term="performance" /><category term="Red Hat OpenShift" /><author><name>Tom Deseyn</name></author><id>https://developers.redhat.com/blog/?p=548347</id><updated>2019-01-08T13:00:16Z</updated><published>2019-01-08T13:00:16Z</published><content type="html">&lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/nuget/what-is-nuget"&gt;NuGet&lt;/a&gt; is the .NET package manager. By default, the .NET Core SDK will use packages from the nuget.org website.&lt;/p&gt; &lt;p&gt;In this article, you&amp;#8217;ll learn how to deploy a NuGet server on &lt;a href="https://developers.redhat.com/products/openshift/overview/"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; (RHOCP). We&amp;#8217;ll use it as a caching server and see that it speeds up our builds. Before we get to that, we’ll explore some general NuGet concepts and see why it makes sense to use a local NuGet server.&lt;/p&gt; &lt;p&gt;&lt;span id="more-548347"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;NuGet&lt;/h2&gt; &lt;p&gt;NuGet packages are .NET&amp;#8217;s libraries: they allow us to package compiled code and use it in different applications. To share these packages, we make them accessible via HTTP. When we consume packages from nuget.org, for example, we are using packages from the NuGet feed at https://api.nuget.org/v3/index.json.&lt;/p&gt; &lt;p&gt;The SDK &lt;code&gt;dotnet restore&lt;/code&gt; command retrieves the packages needed to build a project. To override the default of using nuget.org, we can use a &lt;a href="https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file"&gt;NuGet.config file&lt;/a&gt; or specify the &lt;code&gt;--source&lt;/code&gt; argument to the &lt;code&gt;restore&lt;/code&gt; command.&lt;/p&gt; &lt;p&gt;We can use multiple feeds when performing a restore. For example, one feed could be the public repository at nuget.org, while another feed can point to a local NuGet server that hosts packages which are developed in-house.&lt;/p&gt; &lt;p&gt;That is a first use-case: &lt;em&gt;hosting private packages&lt;/em&gt;. Note that a single NuGet server can host multiple distinct feeds. This allows different teams/projects to have their own feeds. You can also use this capability to have separate feeds for development builds and release builds.&lt;/p&gt; &lt;p&gt;A second use-case is &lt;em&gt;caching packages&lt;/em&gt;. In this case, a feed is a cached instance of an upstream feed. By caching packages locally, we can reduce the time to restore the project. We are also no longer dependent on the availability of the upstream server. If the upstream server allows deleting packages, we will still have those in our cache. The caching server also reduces the number of packages that are fetched from the Internet.&lt;/p&gt; &lt;h2&gt;Local hosting options&lt;/h2&gt; &lt;p&gt;&lt;em&gt;Microsoft&amp;#8217;s NuGet server&lt;/em&gt; is open source, &lt;a href="https://github.com/NuGet/NuGetGallery/issues/3390"&gt;but it doesn&amp;#8217;t run on Linux&lt;/a&gt;. Repository managers like &lt;em&gt;JFrog Artifactory&lt;/em&gt; and &lt;em&gt;Sonatype Nexus&lt;/em&gt; are feature-rich package managers that also support NuGet feeds.&lt;/p&gt; &lt;p&gt;If we are looking for a lightweight, NuGet-only option that we can run in a Linux container, &lt;em&gt;BaGet &lt;/em&gt; is an interesting choice. It&amp;#8217;s an &lt;a href="https://github.com/loic-sharma/BaGet"&gt;open source&lt;/a&gt; NuGet server that supports the v3 protocol, and it is implemented using ASP.NET Core.&lt;/p&gt; &lt;h2&gt;RHOCP and NuGet&lt;/h2&gt; &lt;p&gt;RHOCP can build our .NET Core application. The .NET Core builder accepts a number of &lt;a href="https://access.redhat.com/documentation/en-us/net_core/2.2/html/getting_started_guide/gs_dotnet_on_openshift#gs_env-var"&gt;environment variables&lt;/a&gt; to control its behavior. We&amp;#8217;re interested in &lt;code&gt;DOTNET_RESTORE_SOURCES&lt;/code&gt;, which does the following:&lt;/p&gt; &lt;p&gt;&lt;em&gt;Specifies the space-separated list of NuGet package sources used during the restore operation. This overrides all of the sources specified in the NuGet.config file.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;So, to use a local NuGet server, we can set this variable to the feed URL. If you are using Microsoft NuGet Server, JFrog Artifactory, or Sonatype Nexus, have a look at the product documentation for creating a NuGet feed. In the next section, we&amp;#8217;ll explain how to deploy BaGet on RHOCP and use it as a caching NuGet server for nuget.org.&lt;/p&gt; &lt;h2&gt;Using BaGet with RHOCP&lt;/h2&gt; &lt;p&gt;For the following steps, I assume .NET Core support has been added to your RHOCP installation, as described in &lt;a href="https://access.redhat.com/documentation/en-us/net_core/2.2/html/getting_started_guide/gs_dotnet_on_openshift#install_imagestreams"&gt;Installing Image Streams&lt;/a&gt;. The &lt;code&gt;DOTNET_NAMESPACE&lt;/code&gt; variable used in the steps should be set to the Kubernetes namespace that contains the .NET Core builder images.&lt;/p&gt; &lt;p&gt;Using the RHOCP CLI (&lt;code&gt;oc&lt;/code&gt;), import the BaGet template in your RHOCP project:&lt;/p&gt; &lt;pre&gt;$ oc create -f https://raw.githubusercontent.com/redhat-developer/s2i-dotnetcore/master/templates/community/dotnet-baget.json template.template.openshift.io/dotnet-baget-persistent created template.template.openshift.io/dotnet-baget-ephemeral created &lt;/pre&gt; &lt;p&gt;As we can see, this creates two templates: one for a persistent and one for an ephemeral deployment of BaGet.&lt;/p&gt; &lt;p&gt;These templates accept a number of parameters. For example, to see the parameters from &lt;code&gt;dotnet-baget-persistent&lt;/code&gt; execute:&lt;/p&gt; &lt;pre&gt;$ oc process --parameters dotnet-baget-persistent &lt;/pre&gt; &lt;table class="large-24 small-24 downloads-table" style="border: 1px solid black;"&gt; &lt;thead&gt; &lt;tr&gt; &lt;th scope="col"&gt;Parameter Name&lt;/th&gt; &lt;th scope="col"&gt;Description&lt;/th&gt; &lt;th scope="col"&gt;Default&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;NAME&lt;/code&gt;&lt;/td&gt; &lt;td&gt;The name assigned to all of the front-end objects defined in this template.&lt;/td&gt; &lt;td&gt;&lt;code&gt;nuget&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;MIRROR_PACKAGESOURCE&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Packages that are not found locally will be retrieved from this server.&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://api.nuget.org/v3/index.json&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;NUGET_API_KEY&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Set this to a password required to push packages.&lt;/td&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;DELETION_BEHAVIOR&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Set this to &amp;#8211;&lt;code&gt;Unlist&lt;/code&gt; to make packages undiscoverable, or to &lt;code&gt;HardDelete&lt;/code&gt; to remove packages from storage.&lt;/td&gt; &lt;td&gt;&lt;code&gt;Unlist&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;MEMORY_LIMIT&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Maximum amount of memory the .NET Core container can use.&lt;/td&gt; &lt;td&gt;&lt;code&gt;512Mi&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;VOLUME_CAPACITY&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Volume space available for data, e.g. 512Mi, 2Gi&lt;/td&gt; &lt;td&gt;&lt;code&gt;512Mi&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;DOTNET_IMAGE_STREAM_TAG&lt;/code&gt;&lt;/td&gt; &lt;td&gt;The image stream tag that is used to build the code.&lt;/td&gt; &lt;td&gt;&lt;code&gt;dotnet:2.2&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;NAMESPACE&lt;/code&gt;&lt;/td&gt; &lt;td&gt;The RHOCP namespace where the .NET builder ImageStream resides.&lt;/td&gt; &lt;td&gt;&lt;code&gt;openshift&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;SOURCE_REPOSITORY_URL&lt;/code&gt;&lt;/td&gt; &lt;td&gt;The URL of the repository with your application source code.&lt;/td&gt; &lt;td&gt;&lt;code&gt;https://github.com/loic-sharma/BaGet.git&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;SOURCE_REPOSITORY_REF&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Set this to a branch name, tag, or other reference for your repository if you are not using the default branch.&lt;/td&gt; &lt;td&gt;&lt;code&gt;v0.1.29-prerelease&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;code&gt;DOTNET_STARTUP_PROJECT&lt;/code&gt;&lt;/td&gt; &lt;td&gt;Set this to a project file (for example, &lt;code&gt;csproj&lt;/code&gt;) or a folder containing a single project file.&lt;/td&gt; &lt;td&gt;&lt;code&gt;src/BaGet&lt;/code&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;We see that the service by default will mirror packages from nuget.org (&lt;code&gt;MIRROR_PACKAGESOURCE&lt;/code&gt;). Our container is assigned 512MiB of RAM (&lt;code&gt;MEMORY_LIMIT&lt;/code&gt;). We provision 512MiB (&lt;code&gt;VOLUME_CAPACITY&lt;/code&gt;) for persistent storage. The NuGet service will be built from &lt;code&gt;https://github.com/loic-sharma/BaGet.git v0.1.29-prerelease&lt;/code&gt; (&lt;code&gt;SOURCE_REPOSITORY_URL&lt;/code&gt; and &lt;code&gt;SOURCE_REPOSITORY_REF&lt;/code&gt;). The &lt;code&gt;NUGET_API_KEY&lt;/code&gt; is empty: no key is required to push packages to this server. The hostname for our service is &lt;code&gt;nuget&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll now deploy the server in our project:&lt;/p&gt; &lt;pre&gt;$ oc new-app dotnet-baget-ephemeral -p NAMESPACE=$DOTNET_NAMESPACE &lt;/pre&gt; &lt;p&gt;RHOCP will build BaGet from source. We can see the progress of the build:&lt;/p&gt; &lt;pre&gt;$ oc logs -f bc/nuget &lt;/pre&gt; &lt;p&gt;When the build finishes, the NuGet service will be deployed and can be used internally in the project via the URL &lt;code&gt;http://nuget:8080/v3/index.json&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s see how this local NuGet service affects build times.&lt;/p&gt; &lt;p&gt;We&amp;#8217;ll deploy the &lt;a href="https://access.redhat.com/documentation/en-us/net_core/2.2/html/getting_started_guide/gs_dotnet_on_openshift#sample_apps"&gt;dotnet-example&lt;/a&gt; template and trigger a number of builds:&lt;/p&gt; &lt;pre&gt;$ oc new-app dotnet-example -p NAMESPACE=$DOTNET_NAMESPACE $ oc start-build dotnet-example;oc start-build dotnet-example; oc start-build dotnet-example &lt;/pre&gt; &lt;p&gt;In the OpenShift Console, we get an overview of the build times without the local NuGet server:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/non_cached.png"&gt;&lt;img class=" aligncenter wp-image-549237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/non_cached.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/non_cached.png" alt="Overview of the build times without the local NuGet server" width="642" height="260" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/non_cached.png 642w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/non_cached-300x121.png 300w" sizes="(max-width: 642px) 100vw, 642px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Now we&amp;#8217;ll deploy the same application and use the local NuGet server as a cache:&lt;/p&gt; &lt;pre&gt;$ oc new-app dotnet-example -p NAMESPACE=$DOTNET_NAMESPACE -p NAME=dotnet-example-nuget -p DOTNET_RESTORE_SOURCES=http://nuget:8080/v3/index.json $ oc start-build dotnet-example-nuget; oc start-build dotnet-example-nuget; oc start-build dotnet-example-nuget; oc start-build dotnet-example-nuget &lt;/pre&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/cached.png"&gt;&lt;img class=" aligncenter wp-image-549227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/cached.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/cached.png" alt="Deploying the same application and use the local NuGet server as a cache" width="664" height="243" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/cached.png 664w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/cached-300x110.png 300w" sizes="(max-width: 664px) 100vw, 664px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;As we can see from the graphs, using the local NuGet server significantly reduces the build time. The builds using nuget.org directly have a huge variation between build times, which is gone with the local server. We see our first build with the local server took a bit longer. During this build, packages were retrieved from nuget.org and cached locally. Those packages were then re-used for the successive builds.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, we’ve looked at options to deploy a NuGet server locally. We then saw how you can use a local NuGet server to speed up .NET Core builds on Red Hat OpenShift Container Platform.&lt;/p&gt; &lt;h2&gt;Additional .NET Core articles on the Red Hat Developer blog&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/13/building-net-core-container-images-using-s2i/" rel="bookmark"&gt;Building .NET Core container images using S2I&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/07/dotnet-special-folder-api-linux/" rel="bookmark"&gt;Locating special folders in cross-platform .NET applications&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/21/asp_dotnet_core_kubernetes_health_check_openshift/" rel="bookmark"&gt;Using Kubernetes readiness and liveness probes for health checks with ASP.NET Core 2.2 on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/05/announcing-net-core-2-2-for-red-hat-platforms/" rel="bookmark"&gt;Announcing .NET Core 2.2 for Red Hat Platforms&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/09/25/sql-server-on-openshift/" rel="bookmark"&gt;Running Microsoft SQL Server on Red Hat OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/10/12/securing-net-core-on-openshift-using-https/" rel="bookmark"&gt;Securing .NET Core on OpenShift using HTTPS&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/07/24/improv-net-core-kestrel-performance-linux/" rel="bookmark"&gt;Improving .NET Core Kestrel performance using a Linux-specific transport&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#38;linkname=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#38;linkname=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#38;linkname=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#38;linkname=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#38;linkname=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#38;linkname=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#38;linkname=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#38;linkname=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F08%2Flocal-nuget-server-red-hat-openshift-container-platform%2F&amp;#038;title=Using%20a%20local%20NuGet%20server%20with%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2019/01/08/local-nuget-server-red-hat-openshift-container-platform/" data-a2a-title="Using a local NuGet server with Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/08/local-nuget-server-red-hat-openshift-container-platform/"&gt;Using a local NuGet server with Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/sMyPLEZfoqo" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;NuGet is the .NET package manager. By default, the .NET Core SDK will use packages from the nuget.org website. In this article, you&amp;#8217;ll learn how to deploy a NuGet server on Red Hat OpenShift Container Platform (RHOCP). We&amp;#8217;ll use it as a caching server and see that it speeds up our builds. Before we get to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/08/local-nuget-server-red-hat-openshift-container-platform/"&gt;Using a local NuGet server with Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/01/08/local-nuget-server-red-hat-openshift-container-platform/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">548347</post-id><dc:creator>Tom Deseyn</dc:creator><dc:date>2019-01-08T13:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/08/local-nuget-server-red-hat-openshift-container-platform/</feedburner:origLink></entry><entry><title>Securing an embedded Jetty server using Elytron</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Gi1OgB-ihQg/securing-an-embedded-jetty-server-using-elytron" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_aggregated" scheme="searchisko:content:tags" /><category term="feed_name_fjuma" scheme="searchisko:content:tags" /><category term="jetty" scheme="searchisko:content:tags" /><category term="jetty-embedded" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>Farah Juma</name></author><id>searchisko:content:id:jbossorg_blog-securing_an_embedded_jetty_server_using_elytron</id><updated>2019-01-08T00:12:33Z</updated><published>2019-01-08T00:12:33Z</published><content type="html">&lt;!-- [DocumentBodyStart:0e14793c-5e81-4702-a1e8-dc046f1a83b2] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Although Elytron was developed for the WildFly application server, it is possible to use Elytron outside of WildFly. This blog post is going to give an overview of how to secure an embedded Jetty server using Elytron. In particular, we&amp;#8217;re going to take a look at an example embedded Jetty application that makes use of HTTP Basic authentication and we&amp;#8217;re going to modify it so that it&amp;#8217;s backed by Elytron for its security.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Simple embedded Jetty application&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Let&amp;#8217;s take a look at a simple embedded Jetty server application:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:5ada13df-b36b-41c1-941e-c9d92b4278c6][excluded]--&gt;&lt;pre class="java" name="code"&gt;public static void main(String[] args) throws Exception { &amp;#160;&amp;#160;&amp;#160; // Create the Jetty server instance &amp;#160;&amp;#160;&amp;#160; Server server = new Server(8080); &amp;#160;&amp;#160;&amp;#160; ConstraintSecurityHandler security = new ConstraintSecurityHandler(); &amp;#160;&amp;#160;&amp;#160; server.setHandler(security); &amp;#160;&amp;#160;&amp;#160; // Create a constraint that specifies that accessing "/secured" requires authentication &amp;#160;&amp;#160;&amp;#160; // and the authenticated user must have "admin" role &amp;#160;&amp;#160;&amp;#160; Constraint constraint = new Constraint(); &amp;#160;&amp;#160;&amp;#160; constraint.setName("auth"); &amp;#160;&amp;#160;&amp;#160; constraint.setAuthenticate(true); &amp;#160;&amp;#160;&amp;#160; constraint.setRoles(new String[]{"admin"}); &amp;#160;&amp;#160;&amp;#160; ConstraintMapping mapping = new ConstraintMapping(); &amp;#160;&amp;#160;&amp;#160; mapping.setPathSpec("/secured"); &amp;#160;&amp;#160;&amp;#160; mapping.setConstraint(constraint); &amp;#160;&amp;#160;&amp;#160; security.setConstraintMappings(Collections.singletonList(mapping)); &amp;#160;&amp;#160;&amp;#160; // Security realm configuration &amp;#160;&amp;#160;&amp;#160; // alice: alice123+,admin,employee &amp;#160;&amp;#160;&amp;#160; // bob: bob123+,employee &amp;#160;&amp;#160;&amp;#160; LoginService loginService = new HashLoginService("MyRealm", "src/test/resources/realm.properties"); &amp;#160;&amp;#160;&amp;#160; server.addBean(loginService); &amp;#160;&amp;#160;&amp;#160; security.setLoginService(loginService); &amp;#160;&amp;#160;&amp;#160; // Use Jetty's BasicAuthenticator &amp;#160;&amp;#160;&amp;#160; security.setAuthenticator(new BasicAuthenticator()); &amp;#160;&amp;#160;&amp;#160; // Configure the handler we are securing &amp;#160;&amp;#160;&amp;#160; ServletHandler servletHandler = new ServletHandler(); &amp;#160;&amp;#160;&amp;#160; servletHandler.addServletWithMapping(SecuredServlet.class, "/secured"); &amp;#160;&amp;#160;&amp;#160; security.setHandler(servletHandler); &amp;#160;&amp;#160;&amp;#160; server.start(); }&lt;/pre&gt;&lt;!--[CodeBlockEnd:5ada13df-b36b-41c1-941e-c9d92b4278c6]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The above example first creates a Jetty server instance. It then creates a constraint that specifies that accessing the &lt;span style="font-family: 'courier new', courier;"&gt;/secured&lt;/span&gt; page requires authentication and that the authenticated user must have &lt;span style="font-family: 'courier new', courier;"&gt;admin&lt;/span&gt; role. Next, it configures a Jetty security realm that&amp;#8217;s backed by a properties file. It then specifies that Jetty&amp;#8217;s &lt;span style="font-family: 'courier new', courier;"&gt;BasicAuthenticator&lt;/span&gt; should be used to handle authentication. It also specifies the &lt;span style="font-family: 'courier new', courier;"&gt;ServletHandler&lt;/span&gt; that&amp;#8217;s being secured. This handler is configured with a simple servlet that just outputs the username of the authenticated user. Finally, the Jetty server instance is started.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Switching to Elytron&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Let&amp;#8217;s modify our simple Jetty application so that it&amp;#8217;s backed by Elytron for its security. To do this, we're going to focus on the security related parts of the example, namely the security realm configuration, the &lt;span style="font-family: 'courier new', courier;"&gt;Authenticator&lt;/span&gt; configuration, and the &lt;span style="font-family: 'courier new', courier;"&gt;ServletHandler&lt;/span&gt; configuration. The code used in this example can be found &lt;a class="jive-link-external-small" href="https://github.com/wildfly-security-incubator/elytron-examples/tree/master/jetty-standalone" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;Dependencies&lt;/h3&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;There are two key dependencies that are needed:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;org.wildfly.security:wildfly-elytron - This provides the WildFly Elytron security framework.&lt;/li&gt;&lt;li&gt;org.wildfly.security.elytron-web:jetty-server - This provides classes for integrating Elytron based HTTP authentication with Jetty.&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;Creating an Elytron SecurityDomain&lt;/h3&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The first thing we&amp;#8217;re going to do is create an Elytron security domain. We&amp;#8217;re going to use a simple map backed security realm for this example but any type of Elytron security realm could be used here instead:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:2274b559-e02e-4589-8b4a-818d607080df][excluded]--&gt;&lt;pre class="java" name="code"&gt;private static SecurityDomain createSecurityDomain() throws Exception { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; // Create an Elytron map-backed security realm &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SimpleMapBackedSecurityRealm simpleRealm = new SimpleMapBackedSecurityRealm(() -&amp;gt; new Provider[] { elytronProvider }); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Map&amp;lt;string, simplerealmentry=""&amp;gt; identityMap = new HashMap&amp;lt;&amp;gt;(); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; // Add user alice &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; identityMap.put("alice", new SimpleRealmEntry(getCredentialsForClearPassword("alice123+"), getAttributesForRoles("employee", "admin"))); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; // Add user bob &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; identityMap.put("bob", new SimpleRealmEntry(getCredentialsForClearPassword("bob123+"), getAttributesForRoles("employee"))); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; simpleRealm.setIdentityMap(identityMap); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; // Add the map-backed security realm to a new security domain's list of realms &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SecurityDomain.Builder builder = SecurityDomain.builder() &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .addRealm("ExampleRealm", simpleRealm).build() &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .setPermissionMapper((principal, roles) -&amp;gt; PermissionVerifier.from(new LoginPermission())) &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .setDefaultRealmName("ExampleRealm"); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return builder.build(); }&lt;/pre&gt;&lt;!--[CodeBlockEnd:2274b559-e02e-4589-8b4a-818d607080df]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Notice that our security domain has two users, &lt;span style="font-family: 'courier new', courier;"&gt;alice&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;bob&lt;/span&gt;, with passwords &lt;span style="font-family: 'courier new', courier;"&gt;alice123+&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;bob123+&lt;/span&gt;, respectively. Note that &lt;span style="font-family: 'courier new', courier;"&gt;alice&lt;/span&gt; has both &lt;span style="font-family: 'courier new', courier;"&gt;employee&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;admin&lt;/span&gt; role and &lt;span style="font-family: 'courier new', courier;"&gt;bob&lt;/span&gt; only has &lt;span style="font-family: 'courier new', courier;"&gt;employee&lt;/span&gt; role.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;Creating an ElytronAuthenticator&lt;/h3&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The next thing we&amp;#8217;re going to do is create an &lt;span style="font-family: 'courier new', courier;"&gt;ElytronAuthenticator&lt;/span&gt; instance. &lt;span style="font-family: 'courier new', courier;"&gt;ElytronAuthenticator&lt;/span&gt; is a class from the &lt;a class="jive-link-external-small" href="https://github.com/wildfly-security/elytron-web-jetty" rel="nofollow"&gt;elytron-web-jetty&lt;/a&gt; project that implements Jetty&amp;#8217;s &lt;span style="font-family: 'courier new', courier;"&gt;Authenticator&lt;/span&gt; interface. It is the class that will be used for validating a request. In particular, &lt;span style="font-family: 'courier new', courier;"&gt;ElytronAuthenticator&lt;/span&gt;&amp;#8217;s &lt;span style="font-family: 'courier new', courier;"&gt;validateRequest&lt;/span&gt; method uses Elytron APIs to perform authentication for a request by making use of an Elytron &lt;span style="font-family: 'courier new', courier;"&gt;SecurityDomain&lt;/span&gt; and an Elytron &lt;span style="font-family: 'courier new', courier;"&gt;HttpAuthenticationFactory&lt;/span&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;We&amp;#8217;re first going to create an Elytron &lt;span style="font-family: 'courier new', courier;"&gt;HttpServerAuthenticationMechanismFactory&lt;/span&gt; which provides the Elytron HTTP Basic authentication mechanism:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:e7c1648f-05b1-4727-9f06-e9ff19c16f0b][excluded]--&gt;&lt;pre class="java" name="code"&gt;HttpServerAuthenticationMechanismFactory providerFactory = new SecurityProviderServerMechanismFactory(() -&amp;gt; new Provider[] {new WildFlyElytronProvider()}); HttpServerAuthenticationMechanismFactory httpServerMechanismFactory = new FilterServerMechanismFactory(providerFactory, true, "BASIC");&lt;/pre&gt;&lt;!--[CodeBlockEnd:e7c1648f-05b1-4727-9f06-e9ff19c16f0b]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;We can now create an &lt;span style="font-family: 'courier new', courier;"&gt;ElytronAuthenticator&lt;/span&gt; instance using our &lt;span style="font-family: 'courier new', courier;"&gt;createSecurityDomain()&lt;/span&gt; method and our newly created &lt;span style="font-family: 'courier new', courier;"&gt;httpServerMechanismFactory&lt;/span&gt;:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:2a867b9f-8796-47f5-92f0-07d30aab97c2][excluded]--&gt;&lt;pre class="java" name="code"&gt;private static ElytronAuthenticator createElytronAuthenticator() { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; SecurityDomain securityDomain = createSecurityDomain(); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; return ElytronAuthenticator.builder() &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .setSecurityDomain(securityDomain) &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .setMechanismConfigurationSelector(MechanismConfigurationSelector.constantSelector(MechanismConfiguration.builder() &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .addMechanismRealm(MechanismRealmConfiguration.builder().setRealmName("Elytron Realm").build()) &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .build())) &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .setFactory(httpServerMechanismFactory) &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; .build(); }&lt;/pre&gt;&lt;!--[CodeBlockEnd:2a867b9f-8796-47f5-92f0-07d30aab97c2]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;We can then tweak the example application to specify that authentication should be handled by our &lt;span style="font-family: 'courier new', courier;"&gt;ElytronAuthenticator&lt;/span&gt; instance:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:72708b9b-9dee-44a5-9993-ba4daa5215a2][excluded]--&gt;&lt;pre class="java" name="code"&gt;ElytronAuthenticator elytronAuthenticator = createElytronAuthenticator(); security.setAuthenticator(elytronAuthenticator);&lt;/pre&gt;&lt;!--[CodeBlockEnd:72708b9b-9dee-44a5-9993-ba4daa5215a2]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;Wrapping the ServletHandler with an ElytronRunAsHandler&lt;/h3&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Recall that the &lt;span style="font-family: 'courier new', courier;"&gt;ServletHandler&lt;/span&gt; in the example was configured with a simple secured servlet that just outputs the username of the authenticated user. We&amp;#8217;re now going to wrap that handler with an &lt;span style="font-family: 'courier new', courier;"&gt;ElytronRunAsHandler&lt;/span&gt;, as shown below. This class is also from the &lt;a class="jive-link-external-small" href="https://github.com/wildfly-security/elytron-web-jetty" rel="nofollow"&gt;elytron-web-jetty&lt;/a&gt; project and is used to associate the security identity that was produced after successfully validating a request with the current thread.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:83983643-e186-4c16-bfdc-f524d6de964a][excluded]--&gt;&lt;pre class="java" name="code"&gt;ServletHandler servletHandler = new ServletHandler(); ElytronRunAsHandler elytronRunAsHandler = new ElytronRunAsHandler(servletHandler); servletHandler.addServletWithMapping(SecuredServlet.class, "/secured"); security.setHandler(elytronRunAsHandler);&lt;/pre&gt;&lt;!--[CodeBlockEnd:83983643-e186-4c16-bfdc-f524d6de964a]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now, in our secured servlet, we can use &lt;span style="font-family: 'courier new', courier;"&gt;securityDomain.getCurrentSecurityIdentity()&lt;/span&gt; to get the current user and then we can use &lt;span style="font-family: 'courier new', courier;"&gt;getPrincipal().getName()&lt;/span&gt; to output the username of that authenticated user:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:559ca9da-9c11-42bc-9458-361986a1a6dd][excluded]--&gt;&lt;pre class="java" name="code"&gt;public static class SecuredServlet extends HttpServlet { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; response.setContentType("text/html"); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; response.setStatus(HttpServletResponse.SC_OK); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; PrintWriter writer = response.getWriter(); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; writer.println("Hello " + securityDomain.getCurrentSecurityIdentity().getPrincipal().getName() + "! You've authenticated successfully using Elytron!"); &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; } }&lt;/pre&gt;&lt;!--[CodeBlockEnd:559ca9da-9c11-42bc-9458-361986a1a6dd]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;These are all the changes that are needed to modify our example embedded Jetty application so that it&amp;#8217;s backed by Elytron for its security. The complete code for this example can be found &lt;a class="jive-link-external-small" href="https://github.com/wildfly-security-incubator/elytron-examples/tree/master/jetty-standalone" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;Running the modified example application&lt;/h3&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To build and run the modified example application, the following command can be used:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:cbd72568-7b41-4a16-8de2-f825a98b6701][excluded]--&gt;&lt;pre class="plain" name="code"&gt;mvn clean install exec:exec&lt;/pre&gt;&lt;!--[CodeBlockEnd:cbd72568-7b41-4a16-8de2-f825a98b6701]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;This will start the embedded Jetty server instance and it will be listening for requests on port 8080.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now try accessing the example application using &lt;a class="jive-link-external-small" href="http://localhost:8080/secured" rel="nofollow"&gt;http://localhost:8080/secured&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;First, try to log in as &lt;span style="font-family: 'courier new', courier;"&gt;bob&lt;/span&gt; using password &lt;span style="font-family: 'courier new', courier;"&gt;bob123+&lt;/span&gt;. Since accessing the &lt;span style="font-family: 'courier new', courier;"&gt;/secured&lt;/span&gt; page requires &lt;span style="font-family: 'courier new', courier;"&gt;admin&lt;/span&gt; role and since &lt;span style="font-family: 'courier new', courier;"&gt;bob&lt;/span&gt; is not an admin, you'll see an HTTP 403 error.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Next, try to log in as &lt;span style="font-family: 'courier new', courier;"&gt;alice&lt;/span&gt; using password &lt;span style="font-family: 'courier new', courier;"&gt;alice123+&lt;/span&gt;. Since &lt;span style="font-family: 'courier new', courier;"&gt;alice&lt;/span&gt; has &lt;span style="font-family: 'courier new', courier;"&gt;admin&lt;/span&gt; role, you'll be able to successfully log in and will see the following message:&lt;/p&gt;&lt;blockquote class="jive-quote"&gt;&lt;p&gt;Hello alice! You've authenticated successfully using Elytron!&lt;/p&gt;&lt;/blockquote&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;This blog post has shown how to secure an embedded Jetty server using Elytron. The classes for integrating Elytron based HTTP authentication with Jetty can be found in the &lt;a class="jive-link-external-small" href="https://github.com/wildfly-security/elytron-web-jetty" rel="nofollow"&gt;elytron-web-jetty&lt;/a&gt; project.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:0e14793c-5e81-4702-a1e8-dc046f1a83b2] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Gi1OgB-ihQg" height="1" width="1" alt=""/&gt;</content><summary>Although Elytron was developed for the WildFly application server, it is possible to use Elytron outside of WildFly. This blog post is going to give an overview of how to secure an embedded Jetty server using Elytron. In particular, we’re going to take a look at an example embedded Jetty application that makes use of HTTP Basic authentication and we’re going to modify it so that it’s backed by Ely...</summary><dc:creator>Farah Juma</dc:creator><dc:date>2019-01-08T00:12:33Z</dc:date><feedburner:origLink>https://developer.jboss.org/people/fjuma/blog/2019/01/07/securing-an-embedded-jetty-server-using-elytron</feedburner:origLink></entry><entry><title>New WildFly Project Lead</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4lIr2tPIEHU/" /><category term="Announcement" scheme="searchisko:content:tags" /><category term="feed_group_name_jbossas" scheme="searchisko:content:tags" /><category term="feed_name_wildfly" scheme="searchisko:content:tags" /><author><name>Jason Greene</name></author><id>searchisko:content:id:jbossorg_blog-new_wildfly_project_lead</id><updated>2019-01-07T20:13:27Z</updated><published>2019-01-07T18:00:00Z</published><content type="html">&lt;div class="paragraph"&gt; &lt;p&gt;I am very excited to announce that &lt;a href="https://developer.jboss.org/people/brian.stansberry"&gt;Brian Stansberry&lt;/a&gt; (&lt;a href="https://twitter.com/bestansberry"&gt;@bestansberry&lt;/a&gt;) will be taking on the role of WildFly project lead. Brian has been a major contributor to the project for almost 15 years now. During this time, he led a number of critical and complex subsystems including Clustering, Management, and most recently the cross-cutting cloud integration work. He is also one of our most active reviewers, and has helped many contributors navigate deep WildFly internals. Congratulations Brian!&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It’s been a great journey, so I want to think each and every one of you for your contributions and support over the years. Our work as a community has frequently pushed the envelope, and led to WildFly being one of the most innovative and popular application servers available. While I will be moving on from this role, I won’t be too far way, still participating but tackling a new challenge (I’ll have more to say about that in the future).&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With Brian at the helm, and all the great folks contributing to the project, I know WildFly has a bright future. I look forward to seeing the next chapter.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Turn the page.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;-Jason&lt;/p&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4lIr2tPIEHU" height="1" width="1" alt=""/&gt;</content><summary>I am very excited to announce that Brian Stansberry (@bestansberry) will be taking on the role of WildFly project lead. Brian has been a major contributor to the project for almost 15 years now. During this time, he led a number of critical and complex subsystems including Clustering, Management, and most recently the cross-cutting cloud integration work. He is also one of our most active reviewer...</summary><dc:creator>Jason Greene</dc:creator><dc:date>2019-01-07T18:00:00Z</dc:date><feedburner:origLink>http://wildfly.org/news/2019/01/07/New-Project-Lead/</feedburner:origLink></entry><entry><title>Using the Yeoman Camel-Project generator to jump start a project</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Lq9iGrMwbrs/" /><category term="Developer Tools" /><category term="Integration" /><category term="JBoss Fuse" /><category term="Modern App Dev" /><category term="VS Code" /><category term="apache camel" /><category term="Camel-Project generator" /><category term="Fuse" /><category term="Red Hat Fuse" /><category term="VS Code Extensions" /><category term="wsdl2rest" /><category term="Yeoman" /><author><name>Brian Fitzpatrick</name></author><id>https://developers.redhat.com/blog/?p=545167</id><updated>2019-01-07T13:00:30Z</updated><published>2019-01-07T13:00:30Z</published><content type="html">&lt;p&gt;The &lt;a href="https://tools.jboss.org/features/fusetools.html"&gt;Red Hat Fuse Tooling&lt;/a&gt; team recently broadened its focus from a cross-platform, single-IDE (&lt;a href="https://developers.redhat.com/products/devstudio/overview/"&gt;Eclipse&lt;/a&gt;) approach to a cross-platform, cross-IDE approach (Eclipse, VS Code, Che), starting several concerted efforts to provide tools that work across platforms and development environments. Supporting VS Code has become a priority that led us to explore using the Yeoman framework for project and file generation to provide developers a way to jump start their Fuse/Camel development efforts.&lt;/p&gt; &lt;p&gt;This article describes the Yeoman framework and the new Yeoman-based Camel-Project generator the Fuse Tooling team created, and it shows how to install and run the generator.&lt;/p&gt; &lt;p&gt;&lt;span id="more-545167"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What is Yeoman?&lt;/h2&gt; &lt;p&gt;The &lt;a href="https://yeoman.io/"&gt;Yeoman homepage&lt;/a&gt; describes the framework as “&amp;#8230;a generic scaffolding system allowing the creation of any kind of app. It allows for rapidly getting started on new projects and streamlines the maintenance of existing projects.”&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The framework provides an app-agnostic generator ecosystem that can be used to put together entire projects or just parts.&lt;/li&gt; &lt;li&gt;It is based on node.js and can be managed using the npm package manager.&lt;/li&gt; &lt;li&gt;Yeoman provides an extensive (and growing) array of &amp;#8220;generators&amp;#8221; available for Angular, Backbone, React, Polymer, and nearly 6,000 other projects.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_545207" style="width: 310px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/yeoman-home-image.png"&gt;&lt;img class="wp-image-545207 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/yeoman-home-image-300x168.png" alt="Learn more at yeoman.io" width="300" height="168" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/yeoman-home-image-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/yeoman-home-image-768x430.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/yeoman-home-image.png 900w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;p class="wp-caption-text"&gt;Learn more at &lt;a href="https://yeoman.io/" target="_blank" rel="noopener"&gt;Yeoman.io&lt;/a&gt;&lt;/p&gt;&lt;/div&gt; &lt;p style="text-align: left;"&gt;Common use cases for Yeoman generators include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Create a project&lt;/li&gt; &lt;li&gt;Create a new chunk of a project, like a unit test&lt;/li&gt; &lt;li&gt;Create a module or package&lt;/li&gt; &lt;li&gt;Bootstrap a new service&lt;/li&gt; &lt;li&gt;Enforce standards, best practices, and style guides in generated code&lt;/li&gt; &lt;li&gt;Gets users started quickly with sample apps&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a name="install"&gt;&lt;/a&gt;It’s very easy to install Yeoman once you have NPM on a system:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;At a command prompt such as Cygwin or Git Bash on Windows or Terminal on Mac or Linux machines, type &lt;code&gt;npm install yo&lt;/code&gt; (&lt;a name="global"&gt;&lt;/a&gt;or &lt;code&gt;npm install -g yo&lt;/code&gt; to install the package globally for all users, though this works only if you have admin privileges or by using &lt;code&gt;sudo&lt;/code&gt;, if that is allowed).&lt;/li&gt; &lt;li&gt;To install a specific Yeoman generator, type &lt;code&gt;npm install generator-webapp&lt;/code&gt; (see above comment about &lt;code&gt;-g&lt;/code&gt;!).&lt;/li&gt; &lt;li&gt;And run it, type &lt;code&gt;yo webapp&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;You can learn a great deal more at the &lt;a href="https://yeoman.io/" target="_blank" rel="noopener"&gt;Yeoman website&lt;/a&gt; and start developing your own generators.&lt;/p&gt; &lt;h2&gt;How did the Fuse Tooling team get involved?&lt;/h2&gt; &lt;p&gt;We started working with the Yeoman framework in the middle of 2018 to build a simple generator to help developers create new Camel projects from templates in a manner similar to using the New Project Wizard in the Eclipse-based Fuse Tooling. We&amp;#8217;ve come a long way since then and now offer integration with the SOAP-to-REST functionality we previously explored with the Fuse Tools in Eclipse (see &lt;a href="https://developers.redhat.com/blog/2018/07/24/migrate-soap-to-rest-with-camel/" target="_blank" rel="noopener"&gt;How to migrate your SOAP web service to REST with Camel&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;Though VS Code doesn&amp;#8217;t have the concept of a wizard, there are several examples where Yeoman was used to scaffold projects quickly. We decided to try the same approach for Camel projects.&lt;/p&gt; &lt;p&gt;The new Yeoman-based Camel-Project generator scaffolds a new Camel project and gets it ready to run, setting up the necessary folder structure for Maven-ized Spring, Blueprint, or Java-based Camel development. Now, when you add &lt;code&gt;wsdl2rest&lt;/code&gt; to the equation, you can add all the necessary CXF and Camel Rest DSL bits to that generated project to wrap your old WSDL-based JAX-WS service in a RESTful way.&lt;/p&gt; &lt;h2&gt;Installing and running the generator&lt;/h2&gt; &lt;p&gt;To run the generator, you must first install Yeoman, as &lt;a href="#install"&gt;described above&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Then install the Camel-Project generator by typing &lt;code&gt;npm install -g camel-project&lt;/code&gt;. (See the &lt;a href="#global"&gt;previous notes&lt;/a&gt; about &lt;code&gt;-g&lt;/code&gt; and constraints when installing globally.)&lt;/p&gt; &lt;p&gt;Once the generator is installed, create a new directory, change to it, and run the generator:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Type &lt;code&gt;mkdir my-project&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Type &lt;code&gt;cd my-project&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Type &lt;code&gt;yo camel-project&lt;/code&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;A few notes about the generator:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You provide an application name (it defaults to the folder name), the Camel version (which defaults to 2.22.2), your Camel DSL type (&lt;code&gt;spring&lt;/code&gt;, &lt;code&gt;blueprint&lt;/code&gt;, or Java; it defaults to &lt;code&gt;spring&lt;/code&gt;), and a package name (it defaults to &lt;code&gt;com.&lt;/code&gt; + the project name).&lt;/li&gt; &lt;li&gt;If all is well, it creates a simple project based on the DSL-flavored template you provided.&lt;/li&gt; &lt;li&gt;To build and run the project after it&amp;#8217;s created, type &lt;code&gt;mvn install&lt;/code&gt; and &lt;code&gt;mvn camel:run&lt;/code&gt; (or combine them into one command like &lt;code&gt;mvn install camel:run&lt;/code&gt;).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here is an example where I created a Spring-based project. The basic project I create logs a simple Hello message with a timer when it runs.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/camel-project-demo.gif"&gt;&lt;img class="aligncenter wp-image-550247 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/camel-project-demo-300x114.gif" alt="Example of creating a Spring-based project" width="300" height="114" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/camel-project-demo-300x114.gif 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/camel-project-demo-768x292.gif 768w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;We hope that this new generator will help users quickly get up to speed so they can do their own Camel development in any IDE where Yeoman is supported, and we plan on continuing to add functionality a little at a time.&lt;/p&gt; &lt;h2&gt;SOAP-to-REST support&lt;/h2&gt; &lt;p&gt;Our first chunk of new functionality for the generator focused on the &lt;code&gt;wsd2rest&lt;/code&gt; tool we exposed in our Eclipse-based Fuse Tooling earlier in the year. By pairing the Camel-Project generator with &lt;code&gt;wsdl2rest&lt;/code&gt;, users automatically gain a quick way to map some simple SOAP-based web services over to REST using Camel’s REST DSL.&lt;/p&gt; &lt;p&gt;To activate the new functionality, simply add &lt;code&gt;--wsdl2rest&lt;/code&gt; when you call the generator, for example, &lt;code&gt;yo camel-project --wsdl2rest&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;There are a few new prompts, including the URL to the WSDL, the name of the output directory where the utility will put the generated CXF artifacts, the web address of the generated JAX-RS endpoint, and the web address of the source JAX-WS endpoint.&lt;/p&gt; &lt;p&gt;For example, if I have a simple “Hello, world” service running locally, the process would look something like this:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/camel-project-wsdl2rest-demo.gif"&gt;&lt;img class="aligncenter wp-image-550257 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/camel-project-wsdl2rest-demo-300x206.gif" alt="Simple “Hello, world” service running locally" width="300" height="206" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/camel-project-wsdl2rest-demo-300x206.gif 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/camel-project-wsdl2rest-demo-768x526.gif 768w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Once the Camel service is running locally, you can open your local browser to the URL &lt;code&gt;localhost:8081/jaxrs/hello/"test"&lt;/code&gt; and you should see “Hello test” as a response. This demonstrates the Camel-provided REST service is running and accessing the SOAP service to return valid output.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/testing-rest-service.gif"&gt;&lt;img class="aligncenter wp-image-550267 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/testing-rest-service-300x57.gif" alt="Verifying that the Camel-provided REST service is running" width="300" height="57" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/testing-rest-service-300x57.gif 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/testing-rest-service-768x147.gif 768w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;wsdl2rest&lt;/code&gt; utility provides support for basic types of WSDL implementations, but it does not include any of the WS-* extensions for security and so on. It is simply meant as a quick tool to help migrate simple JAX-WS services to a RESTful paradigm.&lt;/p&gt; &lt;h2&gt;The future&lt;/h2&gt; &lt;p&gt;If you like this tool, be sure to let us know! We’d love to hear what features you might want to see next as we continue to expand its capabilities.&lt;/p&gt; &lt;p&gt;For more information about the Camel-Project generator, check out the &lt;a href="https://www.npmjs.com/package/generator-camel-project"&gt;NPMJS page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about the &lt;code&gt;wsdl2rest&lt;/code&gt; tool, check out its &lt;a href="https://github.com/jboss-fuse/wsdl2rest"&gt;GitHub page&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Also see the &lt;a href="https://developers.redhat.com/products/fuse/overview/"&gt;Red Hat Fuse&lt;/a&gt; page.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#38;linkname=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#38;linkname=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#38;linkname=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#38;linkname=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#38;linkname=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#38;linkname=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#38;linkname=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#38;linkname=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F07%2Fusing-the-yeoman-camel-project-generator-to-jump-start-a-project%2F&amp;#038;title=Using%20the%20Yeoman%20Camel-Project%20generator%20to%20jump%20start%20a%20project" data-a2a-url="https://developers.redhat.com/blog/2019/01/07/using-the-yeoman-camel-project-generator-to-jump-start-a-project/" data-a2a-title="Using the Yeoman Camel-Project generator to jump start a project"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/07/using-the-yeoman-camel-project-generator-to-jump-start-a-project/"&gt;Using the Yeoman Camel-Project generator to jump start a project&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Lq9iGrMwbrs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Red Hat Fuse Tooling team recently broadened its focus from a cross-platform, single-IDE (Eclipse) approach to a cross-platform, cross-IDE approach (Eclipse, VS Code, Che), starting several concerted efforts to provide tools that work across platforms and development environments. Supporting VS Code has become a priority that led us to explore using the Yeoman framework [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/07/using-the-yeoman-camel-project-generator-to-jump-start-a-project/"&gt;Using the Yeoman Camel-Project generator to jump start a project&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/01/07/using-the-yeoman-camel-project-generator-to-jump-start-a-project/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">545167</post-id><dc:creator>Brian Fitzpatrick</dc:creator><dc:date>2019-01-07T13:00:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/07/using-the-yeoman-camel-project-generator-to-jump-start-a-project/</feedburner:origLink></entry><entry><title>Codemotion Rome - Sharing career advice and cloud pittfalls</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AFiVdmjHc5A/codemotion-rome-sharing-career-advice-and-cloud-pitfalls.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-codemotion_rome_sharing_career_advice_and_cloud_pittfalls</id><updated>2019-01-07T06:00:06Z</updated><published>2019-01-07T06:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-7-Sm7R3_MX4/W9sURXozE6I/AAAAAAAAtPU/2rhhN_4Zpj4LOACAmFWGD7OfGvKF9zIGACLcBGAs/s1600/Screenshot%2B2018-11-01%2Bat%2B15.06.24.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="codemotion amsterdam" border="0" data-original-height="879" data-original-width="1600" height="175" src="https://4.bp.blogspot.com/-7-Sm7R3_MX4/W9sURXozE6I/AAAAAAAAtPU/2rhhN_4Zpj4LOACAmFWGD7OfGvKF9zIGACLcBGAs/s320/Screenshot%2B2018-11-01%2Bat%2B15.06.24.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;One of the really interesting and global conference is Codemotion. I've been lucky enough to speak at three different version in Europe.&lt;br /&gt;&lt;br /&gt;This year I've targeted the Amsterdam conference and going to also put the talks outlined here in to the Rome edition.&lt;br /&gt;&lt;br /&gt;Rome was my first ever Codemotion event and since have spoken there twice, hoping now for a third visit to the great developer conference that they put on.&lt;br /&gt;&lt;br /&gt;The talks below are of an inspirational nature and targeting soft skills. They are proven talks that were well received, so let's see if they float for the Codemotion Rome committee.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="line-height: 1.38; margin-bottom: 16pt; margin-top: 0pt; text-align: left;"&gt;&lt;span style="background-color: transparent; color: #666666; font-family: &amp;quot;arial&amp;quot;; font-size: 15pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;How to Jump Start a Career in Open Source&lt;/span&gt;&lt;/h3&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 14.6667px; white-space: pre-wrap;"&gt;&lt;i&gt;It's not impossible. It's not luck. It's not going to happen by itself, so what's the secret sauce? Understanding what makes a career in open source grow, what choices are crucial, and what actions accelerate or damage your open source future are sometimes hard to grasp. Learning to position, expand and grow your personal brand in the open source world is what this session provides. Be ready for your next step in open source. Join me for an hour of power where you'll be given a clear and easy to use plan for jump starting your open source career immediately.&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt; &lt;br /&gt;&lt;b style="-webkit-text-size-adjust: auto; -webkit-text-stroke-width: 0px; caret-color: rgb(0, 0, 0); color: black; font-family: -webkit-standard; font-style: normal; font-variant-caps: normal; font-weight: normal; letter-spacing: normal; orphans: auto; text-align: start; text-decoration: none; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px;"&gt;&lt;br /&gt;&lt;/b&gt;&lt;br /&gt;&lt;h3 style="line-height: 1.38; margin-bottom: 16pt; margin-top: 0pt; text-align: left;"&gt;&lt;span style="color: #666666; font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 20px; white-space: pre-wrap;"&gt;Storytelling - How to Build and Deliver Your Story&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 14.6667px; white-space: pre-wrap;"&gt;&lt;i&gt;Storytelling is as old as time itself…. Since the beginning of humankind, we share our experiences, we teach, we inspire, we relate to stories as told all around us. They are told by elders, they are told by kids at the dinner table, they are written down in books, and they are captured on video or tape. One thing is certain, stories are being told, but what are your stories and how can you become adept at telling them? Join me for hints and tricks crucial to promoting your open source projects, your personal brand, and generating momentum in your career.&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;i style="font-family: arial; font-size: 14.6667px; white-space: pre-wrap;"&gt; &lt;/i&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 14.6667px; white-space: pre-wrap;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="line-height: 1.38; margin-bottom: 16pt; margin-top: 0pt; text-align: left;"&gt;&lt;span style="background-color: transparent; color: #666666; font-family: &amp;quot;arial&amp;quot;; font-size: 15pt; font-style: normal; font-weight: 700; text-decoration: none; vertical-align: baseline; white-space: pre-wrap;"&gt;3 Pitfalls Everyone Should Avoid with Hybrid Multicloud&lt;/span&gt;&lt;/h3&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 14.6667px; white-space: pre-wrap;"&gt;&lt;i&gt;The daily hype is all around you. From cloud, hybrid cloud, to hybrid multi-cloud, you’re told this is the way to ensure a digital future for your business. Let us take you on a journey, looking closely at what hybrid multi-cloud means for your business, the decisions being made about delivering applications, and dealing with legacy applications, likely the most important resources to your business. Join us for an hour of power, where real customer experiences are used to highlight the three top lessons learned as they transitioned into hybrid multi-cloud environments.&lt;/i&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;i&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap;"&gt;&lt;/span&gt;&lt;/span&gt;&lt;/i&gt;&lt;/span&gt;&lt;/div&gt;&lt;div dir="ltr" style="line-height: 1.38; margin-bottom: 0pt; margin-top: 0pt;"&gt;&lt;span style="background-color: transparent; font-variant-east-asian: normal; vertical-align: baseline;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot;;"&gt;&lt;span style="font-size: 11pt; white-space: pre-wrap;"&gt;Hope to see you there!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=pbHAXAwhZ64:gCQWBS_kxa8:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=pbHAXAwhZ64:gCQWBS_kxa8:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=pbHAXAwhZ64:gCQWBS_kxa8:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=pbHAXAwhZ64:gCQWBS_kxa8:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=pbHAXAwhZ64:gCQWBS_kxa8:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=pbHAXAwhZ64:gCQWBS_kxa8:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=pbHAXAwhZ64:gCQWBS_kxa8:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=pbHAXAwhZ64:gCQWBS_kxa8:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=pbHAXAwhZ64:gCQWBS_kxa8:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=pbHAXAwhZ64:gCQWBS_kxa8:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=pbHAXAwhZ64:gCQWBS_kxa8:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/pbHAXAwhZ64" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AFiVdmjHc5A" height="1" width="1" alt=""/&gt;</content><summary>One of the really interesting and global conference is Codemotion. I've been lucky enough to speak at three different version in Europe. This year I've targeted the Amsterdam conference and going to also put the talks outlined here in to the Rome edition. Rome was my first ever Codemotion event and since have spoken there twice, hoping now for a third visit to the great developer conference that t...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-01-07T06:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/pbHAXAwhZ64/codemotion-rome-sharing-career-advice-and-cloud-pitfalls.html</feedburner:origLink></entry><entry><title>Hibernate Community Newsletter 01/2019</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WrKIZ5Tlffk/" /><category term="Discussions" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="newsletter" scheme="searchisko:content:tags" /><author><name>Vlad Mihalcea</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_community_newsletter_01_2019</id><updated>2019-01-07T16:00:57Z</updated><published>2019-01-07T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="articles"&gt;&lt;a class="anchor" href="#articles"&gt;&lt;/a&gt;Articles&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For our Korean readers, &lt;a href="https://pkgonan.github.io/2019/01/hibrnate-autocommit-tuning"&gt;this article&lt;/a&gt; shows how you can speed up transaction response time by setting the &lt;code&gt;hibernate.connection.provider_disables_autocommit&lt;/code&gt; property when the underlying connection pool already disabled the auto-commit mode at the JDBC &lt;code&gt;Connection&lt;/code&gt; level. For more details about the &lt;code&gt;hibernate.connection.provider_disables_autocommit&lt;/code&gt; Hibernate property, check out &lt;a href="https://vladmihalcea.com/why-you-should-always-use-hibernate-connection-provider_disables_autocommit-for-resource-local-jpa-transactions/"&gt;this article&lt;/a&gt; as well.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For our Russian readers, &lt;a href="https://habr.com/post/433958/"&gt;this article&lt;/a&gt; explains how to write database integration tests when using Hibernate and Spring Boot.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;PostgreSQL offers a great variety of database column types like &lt;code&gt;inet&lt;/code&gt;, &lt;code&gt;hstore&lt;/code&gt; or &lt;code&gt;array&lt;/code&gt; types. While the Hibernate ORM framework does not support them by default, you can either write a custom Hibernate Type for all the non-standard column types or use an open-source framework that already offers support for the types you are interested in.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For instance, if you’re using PostgreSQL, the following two articles show you how to:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://vladmihalcea.com/map-postgresql-enum-array-jpa-entity-property-hibernate/"&gt;map a PostgreSQL Enum ARRAY to a JPA entity property using Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://vladmihalcea.com/map-postgresql-hstore-jpa-entity-property-hibernate/"&gt;map a PostgreSQL HStore entity property with JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you plan on using Spring Boot with Hibernate, &lt;a href="http://sinhamohit.com/writing/spring-boot-hibernate-tips"&gt;this article&lt;/a&gt; shows you how to get started and set up the project in very simple steps.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When using JPA and Hibernate, you have the pay attention to the amount of data you are fetching when executing a given business use case. &lt;a href="http://www.mastertheboss.com/jboss-frameworks/hibernate-jpa/hibernate-configuration/hibernate-fetching-performance-tuning"&gt;This article&lt;/a&gt; explains how you can avoid N+1 query issues when using JPQL, Criteria API or direct entity fetching.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="time-to-upgrade"&gt;&lt;a class="anchor" href="#time-to-upgrade"&gt;&lt;/a&gt;Time to upgrade&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;a href="http://in.relation.to/2019/01/07/hibernate-validator-6014-final-out/"&gt;Hibernate Validator 6.0.14&lt;/a&gt; version was released with a fix for the &lt;a href="https://hibernate.atlassian.net/browse/HV-1684"&gt;HV-1684&lt;/a&gt; critical issue. If you’re using the 6.x branch, you should definitely upgrade to this version.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The &lt;a href="http://in.relation.to/2018/12/20/hibernate-search-5-11-0-Final/"&gt;Hibernate Search 5.11.0 &lt;/a&gt; version was released with support for JDK 11 and Wildfly 14.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="questions-and-answers"&gt;&lt;a class="anchor" href="#questions-and-answers"&gt;&lt;/a&gt;Questions and answers&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1904"&gt;Mapping custom column type with PostgreSQL and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1901"&gt;Hibernate Criteria API throws NullPointerException from SearchedCaseExpression when building a CASE expression&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1907"&gt;C3p0 throws "ThreadPoolAsynchronousRunner DeadlockDetector APPARENT DEADLOCK!"&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1926/4"&gt;How to disable the first-level cache with JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1974"&gt;How to reference a parent association using @JoinColumns without referencing the parent identifier with JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1941"&gt;Hibernate Envers throws “the owning Session was closed” with Spring 5.1 and Hibernate ORM 5.3&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1378"&gt;Hibernate does not support database name containing a dash (e.g. my-db) sign when using MySQL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1932"&gt;Why does Hibernate Criteria generate a JOIN clause when using FetchType.EAGER&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1928"&gt;JPA entity graphs and Hibernate @Fetch(FetchMode.SELECT) mode&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/1926"&gt;How to disable the first-level cache with JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/26106557/54023983#54023983"&gt;How to query using an Enum parameter mapped as ORDINAL using JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/21383457/54061210#54061210"&gt;How to use PostgreSQL hstore/json with Java&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/53993982/53998747#53998747"&gt;How to restrict Hibernate to generate SQL query with columns only from root entity in Criteria API involving multiple entities&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/53923203/53928173#53928173"&gt;How to create &lt;code&gt;@OneToOne&lt;/code&gt; &lt;code&gt;LAZY&lt;/code&gt; fetch and &lt;code&gt;optional = true&lt;/code&gt; relationship for composite key entities with JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/53847917/53848099#53848099"&gt;PostgreSQL throws "column is of type jsonb but expression is of type bytea" with JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WrKIZ5Tlffk" height="1" width="1" alt=""/&gt;</content><summary>Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users. Articles For our Korean readers, this article shows how you can speed up transaction response time by setting the hibernate.connection.provider_disables_autocommit property when the underlying connection pool already disabled the auto-commit mode...</summary><dc:creator>Vlad Mihalcea</dc:creator><dc:date>2019-01-07T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2019/01/07/hibernate-community-newsletter-2019-01/</feedburner:origLink></entry><entry><title>Building jBPM Business Applications with Gradle</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zqCrBZR9teE/building-jbpm-business-applications.html" /><category term="feed_group_name_jbossjbpmcommunity" scheme="searchisko:content:tags" /><category term="feed_name_swiderskimaciej" scheme="searchisko:content:tags" /><author><name>Tihomir Surdilovic</name></author><id>searchisko:content:id:jbossorg_blog-building_jbpm_business_applications_with_gradle</id><updated>2019-01-04T20:11:42Z</updated><published>2019-01-04T18:50:00Z</published><content type="html">&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-F9sqxoorDC8/XC-qQeGItsI/AAAAAAAAhrU/UUGSFx5_ZdQ0cORTxE3tiJB-BL5eEzh5wCLcBGAs/s1600/gradle_logo.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="124" data-original-width="406" height="97" src="https://3.bp.blogspot.com/-F9sqxoorDC8/XC-qQeGItsI/AAAAAAAAhrU/UUGSFx5_ZdQ0cORTxE3tiJB-BL5eEzh5wCLcBGAs/s320/gradle_logo.png" width="320" /&gt;&lt;/a&gt;&amp;nbsp;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;By default &lt;a href="http://jbpm.org/businessapps/gettingStarted.html"&gt;jBPM Business Applications&lt;/a&gt; generated via &lt;a href="http://start.jbpm.org/"&gt;start.jbpm.org&lt;/a&gt;&amp;nbsp;are build with &lt;a href="https://maven.apache.org/"&gt;Apache Maven&lt;/a&gt;. Your generated apps also include build scripts (for Unix, OSX, and Windows) which you can use out of the box to build all the apps modules, as well as launch your app in normal or dev modes.&lt;br /&gt;&lt;br /&gt;Using Maven is fine however it excludes &lt;a href="https://gradle.org/"&gt;Gradle&lt;/a&gt; users from being able to build and launch jBPM Business Applications using their favorite build tool.&lt;br /&gt;&lt;br /&gt;If you are using Gradle, take a look at &lt;a href="https://github.com/tsurdilo/jbpm-business-apps-gradle"&gt;this GitHub repo&lt;/a&gt; which includes Gradle build files as well as build scripts that call Gradle to build and launch your business application.&lt;br /&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://2.bp.blogspot.com/-yWsCLfajG84/XC-q2iYFWTI/AAAAAAAAhrk/Wx09icdmrgkwrI81uvrKJcM0Av9aDIzGgCLcBGAs/s1600/Screen%2BShot%2B2019-01-04%2Bat%2B1.49.44%2BPM.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="902" data-original-width="1600" height="180" src="https://2.bp.blogspot.com/-yWsCLfajG84/XC-q2iYFWTI/AAAAAAAAhrk/Wx09icdmrgkwrI81uvrKJcM0Av9aDIzGgCLcBGAs/s320/Screen%2BShot%2B2019-01-04%2Bat%2B1.49.44%2BPM.png" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Follow the documentation there to set up your Gradle build environment for your generated jBPM business app.&lt;br /&gt;&lt;br /&gt;Note that the out-of-the-box Maven build scripts are still the preferred choice when building your app. This is because the limitation of the Gradle scripts not being able to deploy your app on Docker and Openshift. We use the &lt;a href="https://maven.fabric8.io/"&gt;fabric8 plugin&lt;/a&gt;&amp;nbsp;to help us do that and this plugin is not currently available for Gradle unfortunately (you can get more info on that &lt;a href="https://github.com/fabric8io/fabric8-maven-plugin/issues/609"&gt;here&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;Also to note we are not Gradle experts and it would be &lt;b&gt;really&lt;/b&gt;&amp;nbsp;helpful if our &lt;b&gt;jBPM community&lt;/b&gt; could &lt;b&gt;help&lt;/b&gt; us with making the Gradle build for jBPM Business Applications better. If you are interested please clone&amp;nbsp;&lt;a href="https://github.com/tsurdilo/jbpm-business-apps-gradle"&gt;https://github.com/tsurdilo/jbpm-business-apps-gradle&lt;/a&gt;&amp;nbsp;and submit changes via git pull requests and share it to our community. We would really appreciate that!!&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zqCrBZR9teE" height="1" width="1" alt=""/&gt;</content><summary>  By default jBPM Business Applications generated via start.jbpm.org are build with Apache Maven. Your generated apps also include build scripts (for Unix, OSX, and Windows) which you can use out of the box to build all the apps modules, as well as launch your app in normal or dev modes. Using Maven is fine however it excludes Gradle users from being able to build and launch jBPM Business Applicat...</summary><dc:creator>Tihomir Surdilovic</dc:creator><dc:date>2019-01-04T18:50:00Z</dc:date><feedburner:origLink>http://mswiderski.blogspot.com/2019/01/building-jbpm-business-applications.html</feedburner:origLink></entry><entry><title>Integration of container platform essentials (Part 5)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/f3kYhv5o3cI/" /><category term="Containers" /><category term="Integration" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Red Hat OpenShift Container Platform" /><category term="Agile Integration" /><category term="architecture" /><category term="cloud" /><category term="Cloud Integration Platform" /><category term="containers" /><category term="customer experience" /><category term="DevOps" /><category term="howto" /><category term="microservices" /><category term="Red Hat Customers" /><author><name>Eric D. Schabell</name></author><id>https://developers.redhat.com/blog/?p=550987</id><updated>2019-01-04T17:55:46Z</updated><published>2019-01-04T17:55:46Z</published><content type="html">&lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/" target="_blank" rel="noopener"&gt;Part 4 of this series&lt;/a&gt;, we looked into details that determine how your integration becomes the key to transforming your omnichannel customer experience.&lt;/p&gt; &lt;p&gt;It started with laying out the process of how I&amp;#8217;ve approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it&amp;#8217;s time to cover more blueprint details.&lt;/p&gt; &lt;p&gt;This article discusses the core elements in the blueprint (&lt;i&gt;&lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;container&lt;/a&gt; platform and &lt;a href="https://developers.redhat.com/blog/category/microservices/"&gt;microservices&lt;/a&gt;) that&lt;/i&gt; are crucial to the generic architectural overview.&lt;/p&gt; &lt;p&gt;&lt;span id="more-550987"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Architectural details&lt;/h2&gt; &lt;p&gt;As mentioned before, the architectural details covered here are based on real customer integration solutions using open source technologies. The elements presented here are then the &lt;i&gt;generic common architectural elements&lt;/i&gt; that I&amp;#8217;ve identified and collected in a generic architectural blueprint. It&amp;#8217;s my intent to provide a blueprint that provides guidance and not deep technical details.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.17.16.png"&gt;&lt;img class=" aligncenter wp-image-552097 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.17.16-1024x295.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.17.16-1024x295.png" alt="Generic common architectural elements" width="640" height="184" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.17.16-1024x295.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.17.16-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.17.16-768x221.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.17.16.png 1114w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This section covers the visual representations as presented, but it&amp;#8217;s expected that they&amp;#8217;ll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I&amp;#8217;ve chosen icons, text, and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this article, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank" rel="noopener"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s take a look at the details in this architecture and outline the elements uncovered in my research.&lt;/p&gt; &lt;h2&gt;Container platform&lt;/h2&gt; &lt;p&gt;Central to all the research I conducted was the use of a container platform for some if not all of the microservices and applications associated with the omnichannel solution.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.16.png"&gt;&lt;img class=" aligncenter wp-image-552447 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.16-1024x95.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.16-1024x95.png" alt="Omnichannel customer experience" width="640" height="59" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.16-1024x95.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.16-300x28.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.16-768x71.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.16.png 1102w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Without a doubt, the flexibility and consistency provided by a container platform enhance the delivery of solutions provided by the development teams. The operations teams became efficient with container deployments, management, and monitoring standardized across multi-cloud infrastructures.&lt;/p&gt; &lt;p&gt;Within the container platform, the first elements are related to the microservices intended to facilitate front-end applications interactions with the rest of the integration services. Specific groups of  (front-end) microservices are used to service the externally deployed applications:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Front-end microservices (providing access to internal integration microservices)&lt;/li&gt; &lt;li&gt;Process facade microservices (providing access to automated integration processes)&lt;/li&gt; &lt;li&gt;Other integration applications (providing access to aggregated microservices or other internal applications)&lt;/li&gt; &lt;li&gt;Single sign-on or SSO plugins, which proliferate for security across the microservices and container platform&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Deeper access to internal microservices are the next details we&amp;#8217;ll examine, touching on &lt;i&gt;integration and data microservices.&lt;/i&gt;&lt;/p&gt; &lt;h2&gt;Core microservices&lt;/h2&gt; &lt;p&gt;This section of the blueprint highlights a few containerized services and the core microservices.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.25.png"&gt;&lt;img class=" aligncenter wp-image-552127 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.25-1024x167.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.25-1024x167.png" alt="Containerized services and the core microservices" width="640" height="104" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.25-1024x167.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.25-300x49.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.25-768x126.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-20-at-14.30.25.png 1095w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The process facade microservices expose core process integration functionality that is part of the depicted &lt;i&gt;process server &lt;/i&gt;elements. Most deployments host two servers for availability and to leverage the container platform&amp;#8217;s load balancing features.&lt;/p&gt; &lt;p&gt;The &lt;i&gt;integration microservices &lt;/i&gt;and &lt;i&gt;integration data microservices&lt;/i&gt; provide access to most anything in the organization. Imagine mainframes, third-party helpdesk desktop applications, third-party cloud platform service integrations, or whatever your imagination can come up with. Data integration can be container-native storage, third-party products, or traditional storage components found in any architecture.&lt;/p&gt; &lt;p&gt;An &lt;i&gt;SSO server &lt;/i&gt;element is shown to complete the story of what&amp;#8217;s backing the connectivity from microservices to the authentication and authorization back-end system(s) in an organization.&lt;/p&gt; &lt;p&gt;The final items shown here are special instances of storage labeled &lt;i&gt;real-time data storage&lt;/i&gt;, which was part of a researched solution that included integration services requiring special performance storage in containers to stream video to external applications. Those are interesting enough to show separately here, although you would expect it in the storage services.&lt;/p&gt; &lt;p&gt;These details are not all-telling, but should give you the guidance you&amp;#8217;d need to get started in your own architectural situations.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s next&lt;/h2&gt; &lt;p&gt;This overview covers the container platform elements that make up our architecture blueprint for omnichannel customer experience use case.&lt;/p&gt; &lt;p&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/28/integration-is-key-to-customer-experience/"&gt;Part 1: How integration is key to customer experience&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/30/common-architectural-elements-for-modern-integration-architectures/"&gt;Part 2: Common architectural elements for modern integration architectures&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/14/integration-of-external-application-details-part-3/"&gt;Part 3: Integration of external application details&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/"&gt;Part 4: Integration of API management details&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/04/integration-of-container-platform-essentials-part-5/" target="_blank" rel="noopener"&gt;Part 5: Integration of container platform essentials&lt;/a&gt; (this article)&lt;/li&gt; &lt;li&gt;Part 6: Details of specific elements (storage services)&lt;/li&gt; &lt;li&gt;Part 7: Application integration details&lt;/li&gt; &lt;li&gt;Part 8: Dissecting several specific application integration architectures&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Catch up on any articles you missed by following one of the links above.&lt;/p&gt; &lt;p&gt;Next in this series, we&amp;#8217;ll be taking a look at the details of specific elements in an architecture for omnichannel customer experience.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#38;linkname=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#38;linkname=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#38;linkname=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#38;linkname=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#38;linkname=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#38;linkname=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#38;linkname=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#38;linkname=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F04%2Fintegration-of-container-platform-essentials-part-5%2F&amp;#038;title=Integration%20of%20container%20platform%20essentials%20%28Part%205%29" data-a2a-url="https://developers.redhat.com/blog/2019/01/04/integration-of-container-platform-essentials-part-5/" data-a2a-title="Integration of container platform essentials (Part 5)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/04/integration-of-container-platform-essentials-part-5/"&gt;Integration of container platform essentials (Part 5)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/f3kYhv5o3cI" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;In Part 4 of this series, we looked into details that determine how your integration becomes the key to transforming your omnichannel customer experience. It started with laying out the process of how I&amp;#8217;ve approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it&amp;#8217;s time to [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/04/integration-of-container-platform-essentials-part-5/"&gt;Integration of container platform essentials (Part 5)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/01/04/integration-of-container-platform-essentials-part-5/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">550987</post-id><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-01-04T17:55:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/04/integration-of-container-platform-essentials-part-5/</feedburner:origLink></entry><entry><title>Leveraging OpenShift or Kubernetes for automated performance tests (part 2)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ClaHA80N0xk/" /><category term="CI/CD" /><category term="Containers" /><category term="Java" /><category term="Kubernetes" /><category term="Microservices" /><category term="Modern App Dev" /><category term="Performance" /><category term="Red Hat OpenShift Container Platform" /><category term="ElasticSearch" /><category term="EnMasse" /><category term="Jaeger" /><category term="JMeter" /><category term="kubernetes" /><category term="OpenTracing" /><category term="performance testing" /><category term="prometheus" /><category term="Red Hat OpenShift" /><category term="test automation" /><author><name>Frédéric Giloux</name></author><id>https://developers.redhat.com/blog/?p=549097</id><updated>2019-01-03T13:00:01Z</updated><published>2019-01-03T13:00:01Z</published><content type="html">&lt;p&gt;This is the second of a series of three blogs based on a session I hold at EMEA Red Hat Tech Exchange. In the &lt;a href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;first article&lt;/a&gt;, I presented the rationale and approach for leveraging &lt;a href="https://www.openshift.com"&gt;Red Hat OpenShift&lt;/a&gt; or &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; for automated performance testing, and I gave an overview of the setup.&lt;/p&gt; &lt;p&gt;In this article, we will look at building an observability stack that, beyond the support it provides in production, can be leveraged during performance tests. This will provide insight into how the application performs under load.&lt;/p&gt; &lt;p&gt;An example of what is described in this article is available in my &lt;a href="https://github.com/fgiloux/auto-perf-test/"&gt;GitHub repository&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-549097"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Overview of the setup&lt;/h2&gt; &lt;p id="PQALPeh"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png"&gt;&lt;img class="aligncenter wp-image-533387 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-1024x433.png" alt="Overview" width="640" height="271" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-1024x433.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-300x127.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6-768x324.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/11/img_5bdc69ff84eb6.png 1250w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id="_application_metrics"&gt;Application metrics&lt;/h2&gt; &lt;h3 id="_prometheus_grafana_installation"&gt;Prometheus and Grafana installation&lt;/h3&gt; &lt;p&gt;Until OpenShift 3.10, Ansible playbooks were available for installing Prometheus and Grafana. They are installed together with the &lt;code&gt;openshift-ansible&lt;/code&gt; package and are available at:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;code&gt;/usr/share/ansible/openshift-ansible/playbooks/openshift-prometheus&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code&gt;/usr/share/ansible/openshift-ansible/playbooks/openshift-grafana&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;With OpenShift 3.11, Red Hat provides &lt;a href="https://docs.openshift.com/container-platform/3.11/install_config/prometheus_cluster_monitoring.html"&gt;an operator&lt;/a&gt; that, besides performing the installation, allows you to manage the lifecycle of Prometheus and Grafana (applying updates, for instance). It is, however, important to note that Red Hat supports only the operator and associated Prometheus and Grafana for monitoring the cluster at this point in time. Nothing prevents us, however, from leveraging the operator for installing separate instances if we are comfortable with managing them on our own.&lt;/p&gt; &lt;p&gt;&lt;a href="https://github.com/coreos/prometheus-operator"&gt;The Prometheus operator&lt;/a&gt; can also be used for installation on top of upstream Kubernetes.&lt;/p&gt; &lt;h3 id="_application_jmx_jolokia_prometheus_endpoints"&gt;Application JMX/Jolokia and Prometheus endpoints&lt;/h3&gt; &lt;p&gt;The &lt;a href="https://github.com/fabric8io-images/s2i/blob/master/java/images/rhel/prometheus-config.yml"&gt;Fabric8 S2I java image&lt;/a&gt;, which is used by Fuse, among others,  handily comes with support for exporting metrics to Prometheus. Among others, it has a Prometheus exporter agent, which is started with the application and exposes metrics to be scraped. The Java process is started with &lt;code&gt;-javaagent:/opt/prometheus/jmx_prometheus_javaagent.jar=9779:/opt/prometheus/prometheus-config.yml&lt;/code&gt;, where &lt;a href="https://github.com/fabric8io-images/s2i/blob/master/java/images/rhel/prometheus-config.yml"&gt;prometheus-config.yml&lt;/a&gt; already includes all the Camel metrics. You can use the &lt;a href="https://github.com/openshift/source-to-image"&gt;S2I capabilities&lt;/a&gt; of the image to add your own metrics. More information is available &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.0/html/managing_fuse/prometheus#configuring_prometheus"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Most Java applications use JMX for exposing the JVM, frameworks, and application custom metrics. Like the Fabric8 S2I Java image, any Java application can leverage the &lt;a href="https://github.com/prometheus/jmx_exporter"&gt;JMX exporter agent&lt;/a&gt; to make JMX metrics accessible through Prometheus.&lt;/p&gt; &lt;h3 id="_metrics_scraping"&gt;Metrics scraping&lt;/h3&gt; &lt;p&gt;Once the application has made a Prometheus endpoint available, the next step is to tell Prometheus to collect metrics from it. Therefore, a service needs to be created that exposes the Prometheus port (9779) with special annotations. Here is an example:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Service metadata: annotations: prometheus.io/port: '9779' prometheus.io/scheme: http prometheus.io/scrape: 'true' [...]&lt;/pre&gt; &lt;p&gt;Finally, the Prometheus ConfigMap created by the Ansible playbook during the installation into the &lt;code&gt;openshift-metrics&lt;/code&gt; project needs to be amended with a couple of lines where &lt;code&gt;perftest&lt;/code&gt; is the project namespace where my application is deployed. &lt;a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config"&gt;Kubernetes SD configurations&lt;/a&gt; allow retrieving scrape targets from Kubernetes&amp;#8217; REST API and staying synchronized with the cluster state. The &lt;code&gt;endpoints&lt;/code&gt; role discovers targets from listed endpoints of a service. For each endpoint address, one target is discovered per port.&lt;/p&gt; &lt;pre&gt;- job_name: 'myapps-job' kubernetes_sd_configs: - role: endpoints namespaces: names: - perftest&lt;/pre&gt; &lt;p&gt;Using &lt;code&gt;relabel&lt;/code&gt;, we can limit the metrics&amp;#8217; scrape to the service name of our application, &lt;code&gt;camel-amq-fakeapp&lt;/code&gt; here, and the port, which is named &lt;code&gt;prometheus&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;relabel_configs: - source_labels: [__meta_kubernetes_service_name] action: keep regex: camel-amq-fakeapp - source_labels: [__meta_kubernetes_pod_container_port_name] action: keep regex: prometheus&lt;/pre&gt; &lt;h3 id="_dashboards"&gt;Dashboards&lt;/h3&gt; &lt;p&gt;Grafana is the tool usually used for data visualization. The first thing is to configure a data source pointing to our Prometheus installation. The following information needs to be provided:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Name: Self-explanatory; I used &lt;code&gt;DS_PROMETHEUS&lt;/code&gt; in my demo&lt;/li&gt; &lt;li&gt;Type: Prometheus&lt;/li&gt; &lt;li&gt;URL: &lt;code&gt;https://prometheus-openshift-metrics.apps.sandbox.com/&lt;/code&gt; (this is to be populated with the Prometheus route)&lt;/li&gt; &lt;li&gt;Access: Server/proxy (named differently depending on the Grafana version)&lt;/li&gt; &lt;li&gt;Skip TLS Verification (Insecure): If we don&amp;#8217;t have a CA configured&lt;/li&gt; &lt;li&gt;Token (under &amp;#8220;Prometheus settings&amp;#8221;): Set to the result of &lt;code&gt;$ oc serviceaccounts get-token prometheus-reader -n openshift-metrics&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once the data source has been configured, we can create a dashboard making use of it and displaying the collected metrics. Prometheus scrapes them by default every 30 seconds. &lt;a href="https://github.com/fgiloux/auto-perf-test/blob/master/observability/grafana/overview.json"&gt;Here&lt;/a&gt; is an example that creates the dashboard below. It can be uploaded with the following steps:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Click the Grafana icon menu on the top left and select &lt;strong&gt;Dashboards&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;New dashboard&lt;/strong&gt;.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Import Dashboard&lt;/strong&gt; button.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Upload .json File&lt;/strong&gt; button.&lt;/li&gt; &lt;li&gt;Select the JSON file.&lt;/li&gt; &lt;/ol&gt; &lt;p id="afZXNvT"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c16876f642bf.png"&gt;&lt;img class=" aligncenter wp-image-549177 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c16876f642bf-1024x468.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c16876f642bf-1024x468.png" alt="Example dashboard" width="640" height="293" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c16876f642bf-1024x468.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c16876f642bf-300x137.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c16876f642bf-768x351.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Note that this dashboard also contains JMeter metrics (the two graphs on the top line). They will be covered in the third and last article in this series.&lt;/p&gt; &lt;p&gt;The dashboard is contextual: the name of the pod and the instance need to be selected on the top left. These dropdown lists are automatically populated with the data retrieved from OpenShift.&lt;/p&gt; &lt;p&gt;The nice thing with Grafana dashboards is that you can display in one page multiple graphs originating from various sources and realms. This helps with identifying correlations.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The second line contains metrics exposed by Camel: load, failures, and processing times&lt;/li&gt; &lt;li&gt;The third and fourth lines show the resource consumption: memory, CPU, and garbage collections&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I recommend that you have a look at the queries behind each graph and refer to the &lt;a href="https://prometheus.io/docs/"&gt;Prometheus documentation&lt;/a&gt; if you are not familiar with the concepts, metric types, functions, and operators in use. It may give you ideas for building your own dashboards and may provide a practical introduction to the querying capabilities offered.&lt;/p&gt; &lt;h2 id="_application_performance_management"&gt;Application performance management&lt;/h2&gt; &lt;p&gt;Because this article is about performance tests, application performance management is of high relevance. The demo relies on OpenTracing and Jaeger. The instrumentation is split into several parts:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A collector, which acts as a data sink&lt;/li&gt; &lt;li&gt;An agent in charge of sending application metrics to the sink&lt;/li&gt; &lt;li&gt;A front end for querying data from the sink&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It may also be worth mentioning that enMasse/&lt;a href="https://issues.apache.org/jira/browse/ARTEMIS-2028"&gt;ActiveMQ Artemis&lt;/a&gt; is working on adding OpenTracing support.&lt;/p&gt; &lt;h3 id="_collector"&gt;Collector&lt;/h3&gt; &lt;p&gt;Deploying an in-memory Jaeger collector can be done with a single command. A production installation would require the use of Cassandra or Elasticsearch for data storage. Information is available in the &lt;a href="https://github.com/jaegertracing/jaeger-openshift"&gt;jaeger-openshift repository&lt;/a&gt;.&lt;/p&gt; &lt;pre&gt;$ oc process -f https://raw.githubusercontent.com/jaegertracing/jaeger-openshift/master/all-in-one/jaeger-all-in-one-template.yml | oc create -f -&lt;/pre&gt; &lt;h3 id="_agent"&gt;Agent&lt;/h3&gt; &lt;p&gt;The agent can be deployed as a sidecar container. This is handy because this setup will work regardless of the language the application is written in. The library deployed with the application will send traces to the localhost using UDP. Therefore, the following needs to be added to the application deployment configuration under the &lt;code&gt;containers&lt;/code&gt; section:&lt;/p&gt; &lt;pre&gt;- image: jaegertracing/jaeger-agent name: jaeger-agent ports: - containerPort: 5775 protocol: UDP - containerPort: 5778 - containerPort: 6831 protocol: UDP - containerPort: 6832 protocol: UDP args: - '--collector.host-port=jaeger-collector.perftest.svc:14267'&lt;/pre&gt; &lt;p&gt;Using the &lt;code&gt;jaeger-java-client&lt;/code&gt; library, we have added the following to the application &lt;code&gt;pom.xml&lt;/code&gt; file.&lt;/p&gt; &lt;pre&gt;&amp;#60;!-- 0.30 matches the dependency in Camel opentracing starter --&amp;#62; &amp;#60;jaeger.version&amp;#62;0.30.1&amp;#60;/jaeger.version&amp;#62; &amp;#60;!-- Opentracing --&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.apache.camel&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;camel-opentracing-starter&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.jaegertracing&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jaeger-client&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${jaeger.version}&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62;&lt;/pre&gt; &lt;p&gt;The next step is to tell the application to send traces by annotating the &lt;code&gt;Application&lt;/code&gt; class with &lt;code&gt;@CamelOpenTracing&lt;/code&gt; and the &lt;code&gt;Camel OpenTracing&lt;/code&gt; implementation does the rest. Events (spans) are captured for incoming and outgoing messages being sent to/from Camel. Logs are also sent and can be seen when the consumer span is expanded.&lt;/p&gt; &lt;p&gt;Finally, the agent can be configured through environment variables set within the deployment configuration.&lt;/p&gt; &lt;pre&gt;- name: JAEGER_SERVICE_NAME value: fakeapp - name: JAEGER_SAMPLER_PARAM value: '1.0' - name: JAEGER_PROPAGATION value: 'jaeger,b3'&lt;/pre&gt; &lt;p&gt;The service name identifies the service provided by the application component in the trace. By default, Jaeger will send trace information for one call out of 1,000 to limit the burden put on the application. For validating the setup, we may want to tell Jaeger to do it for every single call as done in the code snippet above. Different formats can be used for trace propagation. Jaeger and b3 are configured here.&lt;/p&gt; &lt;h3 id="_frontend"&gt;The front end&lt;/h3&gt; &lt;p&gt;The Jaeger UI has been installed with the collector and a route has been created for reaching it. It can be used to retrieve and display traces and spans. Here is an example of a span. This also includes JMeter producers and consumers. We will see in the third article of this series how they can be added.&lt;/p&gt; &lt;p id="QOFUcSk"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c1682c1ebf5f.png"&gt;&lt;img class=" aligncenter wp-image-549147 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c1682c1ebf5f-1024x435.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c1682c1ebf5f-1024x435.png" alt="Example span" width="640" height="272" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c1682c1ebf5f-1024x435.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c1682c1ebf5f-300x127.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/img_5c1682c1ebf5f-768x326.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id="_logs"&gt;Logs&lt;/h2&gt; &lt;p&gt;If applications running inside containers write their logs to the standard output, they are with OpenShift automatically aggregated into Elasticsearch and made available for querying and reporting in Kibana. It is best is to have them written in a structured way to add new querying and reporting capabilities. You can find more information on ways to achieve this in a  &lt;a href="https://developers.redhat.com/blog/2018/01/22/openshift-structured-application-logs/"&gt;previous article&lt;/a&gt; of mine.&lt;/p&gt; &lt;h2 id="_broker_and_external_services"&gt;Broker and external services&lt;/h2&gt; &lt;p&gt;Monitoring of the broker is not covered in the demo available in my GitHub repository. I made, however, the assumption that the broker is not the limiting factor during our performance tests. It is best to make sure that this holds true.&lt;/p&gt; &lt;p&gt;EnMasse can be monitored using Prometheus and Grafana. Instructions are provided &lt;a href="http://enmasse.io/documentation/master/openshift/#monitoring-messaging"&gt;here&lt;/a&gt;. Also, it would make sense to reuse the Prometheus and Grafana instances monitoring the application. It seems that metrics are getting added to the information exposed; see &lt;a href="https://github.com/EnMasseProject/enmasse/tree/master/metrics-api"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2 id="_jmeter"&gt;JMeter&lt;/h2&gt; &lt;p&gt;Regarding JMeter, I made a few assumptions in the first article in this series. We would better to validate that the resources made available to JMeter are not a limiting factor. The good thing with having it running on OpenShift is that it is easy to scale vertically or horizontally.&lt;/p&gt; &lt;p&gt;Although it is not covered in my GitHub repository, it would make sense to monitor JMeter using Prometheus and make sure that the JMeter instances were not overheated during the tests. Because JMeter instances may come and go when the tests are launched and terminated (that’s a good thing for freeing up resources), a Prometheus &lt;a href="https://github.com/prometheus/pushgateway"&gt;pushgateway&lt;/a&gt; may be used for metrics collection.&lt;/p&gt; &lt;h2 id="_time_profiling_and_diagnostics"&gt;Time profiling and diagnostics&lt;/h2&gt; &lt;p&gt;As an addition to application performance management, &lt;a href="https://dzone.com/articles/using-java-flight-recorder-with-openjdk-11-1"&gt;Java Flight Recorder&lt;/a&gt; and &lt;a href="https://wiki.openjdk.java.net/display/jmc/Main"&gt;Java Mission Control&lt;/a&gt; have recently been open sourced, and they may be valuable tools when performance issues or degradation are noticed. On top of the metrics already exposed through JMX, JMC provides the capability to properly analyze the information: objects allocated per thread, time spent per thread, call tree, time spent at each level, and so on.&lt;/p&gt; &lt;p&gt;A demonstration is not covered here but may be a subject for a subsequent article.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Thanks for reading. I hope you found this second article interesting. The third and last article will show how JMeter and Jenkins, both running on OpenShift, can be leveraged to automate and orchestrate our performance tests.&lt;/p&gt; &lt;h2&gt;All articles in this series&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/22/automated-performance-testing-kubernetes-openshift/"&gt;Leveraging OpenShift or Kubernetes for automated performance tests (part 1)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Leveraging OpenShift or Kubernetes for automated performance tests (part 2 &amp;#8211; this article)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#38;linkname=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F03%2Fleveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2%2F&amp;#038;title=Leveraging%20OpenShift%20or%20Kubernetes%20for%20automated%20performance%20tests%20%28part%202%29" data-a2a-url="https://developers.redhat.com/blog/2019/01/03/leveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2/" data-a2a-title="Leveraging OpenShift or Kubernetes for automated performance tests (part 2)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/03/leveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2/"&gt;Leveraging OpenShift or Kubernetes for automated performance tests (part 2)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ClaHA80N0xk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This is the second of a series of three blogs based on a session I hold at EMEA Red Hat Tech Exchange. In the first article, I presented the rationale and approach for leveraging Red Hat OpenShift or Kubernetes for automated performance testing, and I gave an overview of the setup. In this article, we [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/03/leveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2/"&gt;Leveraging OpenShift or Kubernetes for automated performance tests (part 2)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/01/03/leveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">549097</post-id><dc:creator>Frédéric Giloux</dc:creator><dc:date>2019-01-03T13:00:01Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/03/leveraging-openshift-or-kubernetes-for-automated-performance-tests-part-2/</feedburner:origLink></entry></feed>
